schema {
  query: Query
  mutation: Mutation
}

union CommentSubject = Comment | SurveyTemplate | Customer

type Comment {
  author: User!
  subject: CommentSubject!
  message: String!
  date: DateTime!
}

enum ContactMedium {
  EMAIL
  PHONE
  CONVERSATION
  LETTER
}

union ContactIndividual = Customer | User

type Contact {
  id: String!
  medium: ContactMedium
  from: ContactIndividual
  to: ContactIndividual
  date: DateTime!
  subject: String!
  contents: String!
  survey: SurveyResponse
}

type Query {
  getContacts(page: Int = 0): [Contact]
  getCustomers(page: Int = 0): [Customer]
  getSurveyTemplates(name: String, id: String): [SurveyTemplate]!
}

type Address {
  streetAddress: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
}

type ContactInfo {
  phone: String
  email: String
  mailingAddress: Address
}

type Customer {
  id: String!
  person: Person!
}

type Person {
  givenName: String!
  surName: String!
  preferredName: String
  birthday: DateTime
  contactInfo: ContactInfo!
}

type Mutation {
  createPerson(person: Person!): Boolean
  updatePerson(person: Person!): Boolean
  createSurveyQuestion(surveyQuestion: SurveyQuestion!): Boolean
  updateSurveyQuestion(surveyQuestion: SurveyQuestion!): Boolean
  deleteSurveyQuestion(surveyQuestion: SurveyQuestion!): Boolean
  createSurveyTemplate(surveyTemplate: SurveyTemplate!): Boolean
  updateSurveyTemplate(surveyTemplate: SurveyTemplate!): Boolean
  removeSurveyQuestionFromTemplate(surveyTemplateId: String!, surveyQuestionId: String!): Boolean
  createUser(user: User!): Boolean
  setPassword(username: String!, password: String!): Boolean
  login(username: String!, password: String!): Boolean
  updateUser(user: User!): Boolean
}

scalar DateTime

union SurveyQuestion = SurveyQuestionBoolean | SurveyQuestionDate | SurveyQuestionFloat | SurveyQuestionInt | SurveyQuestionOptions | SurveyQuestionString

union SurveyAnswer = SurveyAnswerBoolean | SurveyAnswerDate | SurveyAnswerFloat | SurveyAnswerInt | SurveyAnswerOptions | SurveyAnswerString

type SurveyQuestionBoolean {
  id: String!
  question: String!
  required: Boolean
  trueDisplayValue: String
  falseDisplayValue: String
}

type SurveyAnswerBoolean {
  question: SurveyQuestionBoolean!
  answer: Boolean!
}

type SurveyQuestionDate {
  id: String!
  question: DateTime!
  required: Boolean
  rangeMax: DateTime
  rangeMin: DateTime
}

type SurveyAnswerDate {
  question: SurveyQuestionDate!
  answer: DateTime!
}

type SurveyQuestionFloat {
  id: String!
  question: String!
  required: Boolean
  rangeMax: Float
  rangeMin: Float
}

type SurveyAnswerFloat {
  question: SurveyQuestionFloat!
  answer: Float!
}

type SurveyQuestionInt {
  id: String!
  question: String!
  required: Boolean
  rangeMin: Int
  rangeMax: Int
}

type SurveyAnswerInt {
  question: SurveyQuestionInt!
  answer: Int!
}

type SurveyQuestionOptions {
  id: String!
  question: String!
  required: Boolean
  options: [String]!
}

type SurveyAnswerOptions {
  question: SurveyQuestionOptions!
  answer: String!
}

type SurveyQuestionString {
  id: String!
  question: String!
  required: Boolean
  pattern: String
}

type SurveyAnswerString {
  question: SurveyQuestionString!
  answer: String!
}

type SurveyResponse {
  date: DateTime!
  respondent: Customer!
  survey: SurveyTemplate!
  responses: [SurveyAnswer]!
}

type SurveyTemplate {
  id: String!
  questions: [SurveyQuestion]!
  author: User!
  name: String!
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

type User {
  username: String!
  person: Person!
  role: String!
  status: UserStatus!
}