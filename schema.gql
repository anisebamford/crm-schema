scalar DateTime

type Address {
  streetAddress: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
}

type ContactInfo {
  phone: String
  email: String
  mailingAddress: Address
}

type Person {
  givenName: String!
  surName: String!
  preferredName: String
  birthday: DateTime
  contactInfo: ContactInfo!
}

type User {
  username: String!
  person: Person!
  role: String!
}

type Customer {
  id: String!
  person: Person!
}

enum ContactMedium {
  EMAIL
  PHONE
  CONVERSATION
  LETTER
}

union ContactIndividual = Customer | User

type Contact {
  id: String!
  medium: ContactMedium
  from: ContactIndividual
  to: ContactIndividual
  date: DateTime!
  subject: String!
  contents: String!
  survey: SurveyTemplate
}

type SurveyTemplate {
  id: String!
  questions: SurveyQuestion[]!
  author: User!
  name: String!
}

union CommentSubject = Comment | SurveyTemplate | Customer

type Comment {
  author: User!
  subject: CommentSubject!
  message: String!
  date: DateTime!
}

type Query {
  getCustomers(page: Int = 0, firstName: String, lastName: String): Customer[]
  getContacts(page: Int = 0, customerId: String, surveyTemplateId: String, username: String): Contact[]
}

type Mutation {
  addPerson(person: Person!): Boolean
  addUser(user: User!): Boolean
  setPassword(username: String!, password: String!): Boolean
  login(username: string!, password: string!): Boolean
}